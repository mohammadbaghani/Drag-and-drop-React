{"ast":null,"code":"// ideally this would be fetched from ../constants but that causes a\n// circular dep loop. This will be refactored as part of a breaking\n// change in the future.\nvar DEFAULT_THEME_MODE = 'light';\nvar THEME_MODES = ['light', 'dark'];\n// Resolves the different types of theme objects in the current API\nexport default function getTheme(props) {\n  if (props && props.theme) {\n    // Theme is the global Atlaskit theme\n    if ('__ATLASKIT_THEME__' in props.theme) {\n      return props.theme.__ATLASKIT_THEME__;\n    }\n    // User has provided alternative modes\n    else if ('mode' in props.theme && THEME_MODES.includes(props.theme.mode)) {\n      return props.theme;\n    }\n  }\n  // If format not supported (or no theme provided), return standard theme\n  return {\n    mode: DEFAULT_THEME_MODE\n  };\n}","map":{"version":3,"sources":["../../../src/utils/getTheme.ts"],"names":[],"mappings":"AAEA;AACA;AACA;AACA,IAAM,kBAAkB,GAAG,OAAO;AAClC,IAAM,WAAW,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC;AAErC;AACA,eAAc,SAAU,QAAQ,CAAC,KAAkB,EAAA;EACjD,IAAI,KAAK,IAAI,KAAK,CAAC,KAAK,EAAE;IACxB;IACA,IAAI,oBAAoB,IAAI,KAAK,CAAC,KAAK,EAAE;MACvC,OAAO,KAAK,CAAC,KAAK,CAAC,kBAAkB;IACtC;IACD;IAAA,KACK,IAAI,MAAM,IAAI,KAAK,CAAC,KAAK,IAAI,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;MACxE,OAAO,KAAK,CAAC,KAAK;IACnB;EACF;EACD;EACA,OAAO;IAAE,IAAI,EAAE;EAAkB,CAAE;AACrC","sourceRoot":"","sourcesContent":["// ideally this would be fetched from ../constants but that causes a\n// circular dep loop. This will be refactored as part of a breaking\n// change in the future.\nvar DEFAULT_THEME_MODE = 'light';\nvar THEME_MODES = ['light', 'dark'];\n// Resolves the different types of theme objects in the current API\nexport default function getTheme(props) {\n    if (props && props.theme) {\n        // Theme is the global Atlaskit theme\n        if ('__ATLASKIT_THEME__' in props.theme) {\n            return props.theme.__ATLASKIT_THEME__;\n        }\n        // User has provided alternative modes\n        else if ('mode' in props.theme && THEME_MODES.includes(props.theme.mode)) {\n            return props.theme;\n        }\n    }\n    // If format not supported (or no theme provided), return standard theme\n    return { mode: DEFAULT_THEME_MODE };\n}\n//# sourceMappingURL=getTheme.js.map"]},"metadata":{},"sourceType":"module"}