{"ast":null,"code":"/* eslint-disable prefer-rest-params */\nimport getTheme from './getTheme';\n// Unpack custom variants, and get correct value for the current theme\nfunction themedVariants(variantProp, variants) {\n  return function (props) {\n    var theme = getTheme(props);\n    if (props && props[variantProp] && variants) {\n      var modes = variants[props[variantProp]];\n      if (modes && modes[theme.mode]) {\n        var value = modes[theme.mode];\n        if (value) {\n          return value;\n        } // TS believes value can be undefined\n      }\n    }\n    return '';\n  };\n}\nexport default function themed(modesOrVariant, variantModes) {\n  if (typeof modesOrVariant === 'string') {\n    return themedVariants(modesOrVariant, variantModes);\n  }\n  var modes = modesOrVariant;\n  return function (props) {\n    // Get theme from the user's props\n    var theme = getTheme(props);\n    // User isn't required to provide both light and dark values\n    if (theme.mode in modes) {\n      var value = modes[theme.mode]; // TS believes value can be undefined\n      if (value) {\n        return value;\n      }\n    }\n    return '';\n  };\n}","map":{"version":3,"sources":["../../../src/utils/themed.ts"],"names":[],"mappings":"AAAA;AAEA,OAAO,QAAQ,MAAM,YAAY;AAOjC;AACA,SAAS,cAAc,CAAI,WAAmB,EAAE,QAA0B,EAAA;EACxE,OAAO,UAAC,KAAkB,EAAA;IACxB,IAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;IAC7B,IAAI,KAAK,IAAI,KAAK,CAAC,WAAW,CAAC,IAAI,QAAQ,EAAE;MAC3C,IAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;MAC1C,IAAI,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;QAC9B,IAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC;QAC/B,IAAI,KAAK,EAAE;UACT,OAAO,KAAK;SACb,CAAC;MACH;IACF;IACD,OAAO,EAAE;EACX,CAAC;AACH;AAEA,eAAc,SAAU,MAAM,CAC5B,cAAiC,EACjC,YAA8B,EAAA;EAE9B,IAAI,OAAO,cAAc,KAAK,QAAQ,EAAE;IACtC,OAAO,cAAc,CAAI,cAAc,EAAE,YAAY,CAAC;EACvD;EACD,IAAM,KAAK,GAAG,cAAc;EAC5B,OAAO,UAAC,KAAkB,EAAA;IACxB;IACA,IAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;IAC7B;IACA,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,EAAE;MACvB,IAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;MACjC,IAAI,KAAK,EAAE;QACT,OAAO,KAAK;MACb;IACF;IACD,OAAO,EAAE;EACX,CAAC;AACH","sourceRoot":"","sourcesContent":["/* eslint-disable prefer-rest-params */\nimport getTheme from './getTheme';\n// Unpack custom variants, and get correct value for the current theme\nfunction themedVariants(variantProp, variants) {\n    return function (props) {\n        var theme = getTheme(props);\n        if (props && props[variantProp] && variants) {\n            var modes = variants[props[variantProp]];\n            if (modes && modes[theme.mode]) {\n                var value = modes[theme.mode];\n                if (value) {\n                    return value;\n                } // TS believes value can be undefined\n            }\n        }\n        return '';\n    };\n}\nexport default function themed(modesOrVariant, variantModes) {\n    if (typeof modesOrVariant === 'string') {\n        return themedVariants(modesOrVariant, variantModes);\n    }\n    var modes = modesOrVariant;\n    return function (props) {\n        // Get theme from the user's props\n        var theme = getTheme(props);\n        // User isn't required to provide both light and dark values\n        if (theme.mode in modes) {\n            var value = modes[theme.mode]; // TS believes value can be undefined\n            if (value) {\n                return value;\n            }\n        }\n        return '';\n    };\n}\n//# sourceMappingURL=themed.js.map"]},"metadata":{},"sourceType":"module"}