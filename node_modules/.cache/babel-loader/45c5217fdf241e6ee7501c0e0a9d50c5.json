{"ast":null,"code":"import _taggedTemplateLiteral from \"C:\\\\Users\\\\USER\\\\Downloads\\\\ea834990-459e-4e30-b7b8-fab8ce3cf9ff\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _templateObject,\n  _jsxFileName = \"C:\\\\Users\\\\USER\\\\Downloads\\\\ea834990-459e-4e30-b7b8-fab8ce3cf9ff\\\\src\\\\dnd\\\\board\\\\Board.js\";\nimport React, { useState } from \"react\";\nimport styled from \"@xstyled/styled-components\";\nimport { colors } from \"@atlaskit/theme\";\nimport PropTypes from \"prop-types\";\nimport Column from \"./Column\";\nimport reorder, { reorderQuoteMap } from \"../reorder\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nconst Container = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  background-color: \", \";\\n  min-height: 100vh;\\n  /* like display:flex but will allow bleeding over the window width */\\n  min-width: 100vw;\\n  display: inline-flex;\\n\"])), colors.B100);\nconst Board = _ref => {\n  let {\n    isCombineEnabled,\n    initial,\n    useClone,\n    containerHeight,\n    withScrollableColumns\n  } = _ref;\n  const [columns, setColumns] = useState(initial);\n  const [ordered, setOrdered] = useState(Object.keys(initial));\n  const onDragEnd = result => {\n    if (result.combine) {\n      if (result.type === \"COLUMN\") {\n        const shallow = [...ordered];\n        shallow.splice(result.source.index, 1);\n        setOrdered(shallow);\n        return;\n      }\n      const column = columns[result.source.droppableId];\n      const withQuoteRemoved = [...column];\n      withQuoteRemoved.splice(result.source.index, 1);\n      const orderedColumns = {\n        ...columns,\n        [result.source.droppableId]: withQuoteRemoved\n      };\n      setColumns(orderedColumns);\n      return;\n    }\n\n    // dropped nowhere\n    if (!result.destination) {\n      return;\n    }\n    const source = result.source;\n    const destination = result.destination;\n\n    // did not move anywhere - can bail early\n    if (source.droppableId === destination.droppableId && source.index === destination.index) {\n      return;\n    }\n\n    // reordering column\n    if (result.type === \"COLUMN\") {\n      const reorderedorder = reorder(ordered, source.index, destination.index);\n      setOrdered(reorderedorder);\n      return;\n    }\n    const data = reorderQuoteMap({\n      quoteMap: columns,\n      source,\n      destination\n    });\n    setColumns(data.quoteMap);\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Droppable, {\n    droppableId: \"board\",\n    type: \"COLUMN\",\n    direction: \"horizontal\",\n    ignoreContainerClipping: Boolean(containerHeight),\n    isCombineEnabled: isCombineEnabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, provided => /*#__PURE__*/React.createElement(Container, Object.assign({\n    ref: provided.innerRef\n  }, provided.droppableProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }), ordered.map((key, index) => /*#__PURE__*/React.createElement(Column, {\n    key: key,\n    index: index,\n    title: key,\n    quotes: columns[key],\n    isScrollable: withScrollableColumns,\n    isCombineEnabled: isCombineEnabled,\n    useClone: useClone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  })), provided.placeholder))));\n};\nBoard.defaultProps = {\n  isCombineEnabled: false\n};\nBoard.propTypes = {\n  isCombineEnabled: PropTypes.bool\n};\nexport default Board;","map":{"version":3,"names":["React","useState","styled","colors","PropTypes","Column","reorder","reorderQuoteMap","DragDropContext","Droppable","Container","div","_templateObject","_taggedTemplateLiteral","B100","Board","_ref","isCombineEnabled","initial","useClone","containerHeight","withScrollableColumns","columns","setColumns","ordered","setOrdered","Object","keys","onDragEnd","result","combine","type","shallow","splice","source","index","column","droppableId","withQuoteRemoved","orderedColumns","destination","reorderedorder","data","quoteMap","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","direction","ignoreContainerClipping","Boolean","provided","assign","ref","innerRef","droppableProps","map","key","title","quotes","isScrollable","placeholder","defaultProps","propTypes","bool"],"sources":["C:/Users/USER/Downloads/ea834990-459e-4e30-b7b8-fab8ce3cf9ff/src/dnd/board/Board.js"],"sourcesContent":["// @flow\r\nimport React, { useState } from \"react\";\r\nimport styled from \"@xstyled/styled-components\";\r\nimport { colors } from \"@atlaskit/theme\";\r\nimport PropTypes from \"prop-types\";\r\nimport Column from \"./Column\";\r\nimport reorder, { reorderQuoteMap } from \"../reorder\";\r\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\r\n\r\nconst Container = styled.div`\r\n  background-color: ${colors.B100};\r\n  min-height: 100vh;\r\n  /* like display:flex but will allow bleeding over the window width */\r\n  min-width: 100vw;\r\n  display: inline-flex;\r\n`;\r\n\r\nconst Board = ({\r\n  isCombineEnabled,\r\n  initial,\r\n  useClone,\r\n  containerHeight,\r\n  withScrollableColumns\r\n}) => {\r\n  const [columns, setColumns] = useState(initial);\r\n\r\n  const [ordered, setOrdered] = useState(Object.keys(initial));\r\n\r\n  const onDragEnd = (result) => {\r\n    if (result.combine) {\r\n      if (result.type === \"COLUMN\") {\r\n        const shallow = [...ordered];\r\n        shallow.splice(result.source.index, 1);\r\n        setOrdered(shallow);\r\n        return;\r\n      }\r\n\r\n      const column = columns[result.source.droppableId];\r\n      const withQuoteRemoved = [...column];\r\n\r\n      withQuoteRemoved.splice(result.source.index, 1);\r\n\r\n      const orderedColumns = {\r\n        ...columns,\r\n        [result.source.droppableId]: withQuoteRemoved\r\n      };\r\n      setColumns(orderedColumns);\r\n      return;\r\n    }\r\n\r\n    // dropped nowhere\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const source = result.source;\r\n    const destination = result.destination;\r\n\r\n    // did not move anywhere - can bail early\r\n    if (\r\n      source.droppableId === destination.droppableId &&\r\n      source.index === destination.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // reordering column\r\n    if (result.type === \"COLUMN\") {\r\n      const reorderedorder = reorder(ordered, source.index, destination.index);\r\n\r\n      setOrdered(reorderedorder);\r\n\r\n      return;\r\n    }\r\n\r\n    const data = reorderQuoteMap({\r\n      quoteMap: columns,\r\n      source,\r\n      destination\r\n    });\r\n\r\n    setColumns(data.quoteMap);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <Droppable\r\n          droppableId=\"board\"\r\n          type=\"COLUMN\"\r\n          direction=\"horizontal\"\r\n          ignoreContainerClipping={Boolean(containerHeight)}\r\n          isCombineEnabled={isCombineEnabled}\r\n        >\r\n          {(provided) => (\r\n            <Container ref={provided.innerRef} {...provided.droppableProps}>\r\n              {ordered.map((key, index) => (\r\n                <Column\r\n                  key={key}\r\n                  index={index}\r\n                  title={key}\r\n                  quotes={columns[key]}\r\n                  isScrollable={withScrollableColumns}\r\n                  isCombineEnabled={isCombineEnabled}\r\n                  useClone={useClone}\r\n                />\r\n              ))}\r\n              {provided.placeholder}\r\n            </Container>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    </>\r\n  );\r\n};\r\n\r\nBoard.defaultProps = {\r\n  isCombineEnabled: false\r\n};\r\n\r\nBoard.propTypes = {\r\n  isCombineEnabled: PropTypes.bool\r\n};\r\n\r\nexport default Board;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}