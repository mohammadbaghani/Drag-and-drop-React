{"ast":null,"code":"// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\nexport default reorder;\nexport const reorderQuoteMap = _ref => {\n  let {\n    quoteMap,\n    source,\n    destination\n  } = _ref;\n  const current = [...quoteMap[source.droppableId]];\n  const next = [...quoteMap[destination.droppableId]];\n  const target = current[source.index];\n\n  // moving to same list\n  if (source.droppableId === destination.droppableId) {\n    const reordered = reorder(current, source.index, destination.index);\n    const result = {\n      ...quoteMap,\n      [source.droppableId]: reordered\n    };\n    return {\n      quoteMap: result\n    };\n  }\n\n  // moving to different list\n\n  // remove from original\n  current.splice(source.index, 1);\n  // insert into next\n  next.splice(destination.index, 0, target);\n  const result = {\n    ...quoteMap,\n    [source.droppableId]: current,\n    [destination.droppableId]: next\n  };\n  return {\n    quoteMap: result\n  };\n};\nexport function moveBetween(_ref2) {\n  let {\n    list1,\n    list2,\n    source,\n    destination\n  } = _ref2;\n  const newFirst = Array.from(list1.values);\n  const newSecond = Array.from(list2.values);\n  const moveFrom = source.droppableId === list1.id ? newFirst : newSecond;\n  const moveTo = moveFrom === newFirst ? newSecond : newFirst;\n  const [moved] = moveFrom.splice(source.index, 1);\n  moveTo.splice(destination.index, 0, moved);\n  return {\n    list1: {\n      ...list1,\n      values: newFirst\n    },\n    list2: {\n      ...list2,\n      values: newSecond\n    }\n  };\n}","map":{"version":3,"names":["reorder","list","startIndex","endIndex","result","Array","from","removed","splice","reorderQuoteMap","_ref","quoteMap","source","destination","current","droppableId","next","target","index","reordered","moveBetween","_ref2","list1","list2","newFirst","values","newSecond","moveFrom","id","moveTo","moved"],"sources":["C:/Users/USER/Downloads/ea834990-459e-4e30-b7b8-fab8ce3cf9ff/src/dnd/reorder.js"],"sourcesContent":["// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nexport default reorder;\n\nexport const reorderQuoteMap = ({ quoteMap, source, destination }) => {\n  const current = [...quoteMap[source.droppableId]];\n  const next = [...quoteMap[destination.droppableId]];\n  const target = current[source.index];\n\n  // moving to same list\n  if (source.droppableId === destination.droppableId) {\n    const reordered = reorder(current, source.index, destination.index);\n    const result = {\n      ...quoteMap,\n      [source.droppableId]: reordered\n    };\n    return {\n      quoteMap: result\n    };\n  }\n\n  // moving to different list\n\n  // remove from original\n  current.splice(source.index, 1);\n  // insert into next\n  next.splice(destination.index, 0, target);\n\n  const result = {\n    ...quoteMap,\n    [source.droppableId]: current,\n    [destination.droppableId]: next\n  };\n\n  return {\n    quoteMap: result\n  };\n};\n\nexport function moveBetween({ list1, list2, source, destination }) {\n  const newFirst = Array.from(list1.values);\n  const newSecond = Array.from(list2.values);\n\n  const moveFrom = source.droppableId === list1.id ? newFirst : newSecond;\n  const moveTo = moveFrom === newFirst ? newSecond : newFirst;\n\n  const [moved] = moveFrom.splice(source.index, 1);\n  moveTo.splice(destination.index, 0, moved);\n\n  return {\n    list1: {\n      ...list1,\n      values: newFirst\n    },\n    list2: {\n      ...list2,\n      values: newSecond\n    }\n  };\n}\n"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAGA,CAACC,IAAI,EAAEC,UAAU,EAAEC,QAAQ,KAAK;EAC9C,MAAMC,MAAM,GAAGC,KAAK,CAACC,IAAI,CAACL,IAAI,CAAC;EAC/B,MAAM,CAACM,OAAO,CAAC,GAAGH,MAAM,CAACI,MAAM,CAACN,UAAU,EAAE,CAAC,CAAC;EAC9CE,MAAM,CAACI,MAAM,CAACL,QAAQ,EAAE,CAAC,EAAEI,OAAO,CAAC;EAEnC,OAAOH,MAAM;AACf,CAAC;AAED,eAAeJ,OAAO;AAEtB,OAAO,MAAMS,eAAe,GAAGC,IAAA,IAAuC;EAAA,IAAtC;IAAEC,QAAQ;IAAEC,MAAM;IAAEC;EAAY,CAAC,GAAAH,IAAA;EAC/D,MAAMI,OAAO,GAAG,CAAC,GAAGH,QAAQ,CAACC,MAAM,CAACG,WAAW,CAAC,CAAC;EACjD,MAAMC,IAAI,GAAG,CAAC,GAAGL,QAAQ,CAACE,WAAW,CAACE,WAAW,CAAC,CAAC;EACnD,MAAME,MAAM,GAAGH,OAAO,CAACF,MAAM,CAACM,KAAK,CAAC;;EAEpC;EACA,IAAIN,MAAM,CAACG,WAAW,KAAKF,WAAW,CAACE,WAAW,EAAE;IAClD,MAAMI,SAAS,GAAGnB,OAAO,CAACc,OAAO,EAAEF,MAAM,CAACM,KAAK,EAAEL,WAAW,CAACK,KAAK,CAAC;IACnE,MAAMd,MAAM,GAAG;MACb,GAAGO,QAAQ;MACX,CAACC,MAAM,CAACG,WAAW,GAAGI;IACxB,CAAC;IACD,OAAO;MACLR,QAAQ,EAAEP;IACZ,CAAC;EACH;;EAEA;;EAEA;EACAU,OAAO,CAACN,MAAM,CAACI,MAAM,CAACM,KAAK,EAAE,CAAC,CAAC;EAC/B;EACAF,IAAI,CAACR,MAAM,CAACK,WAAW,CAACK,KAAK,EAAE,CAAC,EAAED,MAAM,CAAC;EAEzC,MAAMb,MAAM,GAAG;IACb,GAAGO,QAAQ;IACX,CAACC,MAAM,CAACG,WAAW,GAAGD,OAAO;IAC7B,CAACD,WAAW,CAACE,WAAW,GAAGC;EAC7B,CAAC;EAED,OAAO;IACLL,QAAQ,EAAEP;EACZ,CAAC;AACH,CAAC;AAED,OAAO,SAASgB,WAAWA,CAAAC,KAAA,EAAwC;EAAA,IAAvC;IAAEC,KAAK;IAAEC,KAAK;IAAEX,MAAM;IAAEC;EAAY,CAAC,GAAAQ,KAAA;EAC/D,MAAMG,QAAQ,GAAGnB,KAAK,CAACC,IAAI,CAACgB,KAAK,CAACG,MAAM,CAAC;EACzC,MAAMC,SAAS,GAAGrB,KAAK,CAACC,IAAI,CAACiB,KAAK,CAACE,MAAM,CAAC;EAE1C,MAAME,QAAQ,GAAGf,MAAM,CAACG,WAAW,KAAKO,KAAK,CAACM,EAAE,GAAGJ,QAAQ,GAAGE,SAAS;EACvE,MAAMG,MAAM,GAAGF,QAAQ,KAAKH,QAAQ,GAAGE,SAAS,GAAGF,QAAQ;EAE3D,MAAM,CAACM,KAAK,CAAC,GAAGH,QAAQ,CAACnB,MAAM,CAACI,MAAM,CAACM,KAAK,EAAE,CAAC,CAAC;EAChDW,MAAM,CAACrB,MAAM,CAACK,WAAW,CAACK,KAAK,EAAE,CAAC,EAAEY,KAAK,CAAC;EAE1C,OAAO;IACLR,KAAK,EAAE;MACL,GAAGA,KAAK;MACRG,MAAM,EAAED;IACV,CAAC;IACDD,KAAK,EAAE;MACL,GAAGA,KAAK;MACRE,MAAM,EAAEC;IACV;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module"}